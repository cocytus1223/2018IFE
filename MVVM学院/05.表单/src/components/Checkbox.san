<template>
  <div>
    <input 
      type="checkbox" 
      id="{{ id + '_checkbox' }}" 
      on-change="handleChange($event)"
      checked="{= isChecked =}"
      disabled="{= disabled =}" />
    <label for="{{ id + '_checkbox' }}">
      <span class="checkbox"></span>
      <span class="text" s-if="text">{{ text }}</span>
    </label>
    <div class="sub">
      <!-- sub checkboxes -->
      <slot></slot>
    </div>
  </div>
</template>
<script>
  import Checkbox from './Checkbox.san';
  export default {
    components: {
      'san-checkbox': Checkbox,
    },
    messages: {
      // get message from sub checkbox item and update
      // issue: cannot use arrorw function here
      'UI:checkbox-item-checked': function (msg) {
        let checked = msg.value;
        let subItems = this.data.get('subItems');
        // default indeterminate status
        this._setIndeterminate(false);
        // console.log(this.data.raw.text, subItems.length);
        if (subItems.length > 0) {
          let checked_item_num = 0;     
          if (checked === 'indeterminate') {
            this._setIndeterminate(true);
            this.dispatch('UI:checkbox-item-checked', 'indeterminate');
            return;
          }
          // 每次都做所有subitem的判断性能不好，有没有更优算法？
          subItems.map(i => {
            console.log(i.data.get('isChecked'));
            if (i._getIndeterminate()) {
              this._setIndeterminate(true);
              return;
            }
            if (i.data.get('isChecked')) {
              checked_item_num++;
            }
          });
          if (checked_item_num === subItems.length) {
            this.data.set('isChecked', true);
            this.dispatch('UI:checkbox-item-checked', true);
          } else if (checked_item_num === 0) {
            this.data.set('isChecked', false);
            this.dispatch('UI:checkbox-item-checked', false);
          } else {
            this.data.set('isChecked', false);
            this._setIndeterminate(true);
            this.dispatch('UI:checkbox-item-checked', 'indeterminate');
          }
        }
      },
    },
    initData() {
      return {
        //@subItemNum, type: Array<<san-checkbox>Component>[], init: []
        // items of the checkbox
        subItems: [], 
        //@isChecked, type: boolean, init: false
        isChecked: false,
        //@disabled, type: boolean, init: false
        disabled: false,
      }
    },
    attached() {
      // update sub item number data
      this.slot()[0].children.map((i)=> {
        if (i.subTag === 'san-checkbox') {
          this.data.push('subItems', i);
        }
      });
      // console.log(this.data.get('subItems'));
      // console.log(this.data.get('id'), this.slot()[0].aNode.children);
    },
    handleChange(e) {
      // fix the difference between Safari and Chrome
      this.data.set('isChecked', e.target.checked);
      // judge if it is checked
      // console.log(e.target.checked);
      // notify parent component to update sub item numbers
      this.dispatch('UI:checkbox-item-checked', e.target.checked);
      // console.log(this.slot()[0].children);
      // if checked, make all the sub items checked also
      if (this.data.get('isChecked')) {
        this._setAllChildren(this, true);
        this.data.set('checkedItemNum', this.data.get('subItemNum')); 
      // if unchecked, make all the sub items unchecked also
      } else {
        this._setAllChildren(this, false);
        this.data.set('checkedItemNum', 0); 
      }
    },
    _setAllChildren(Component, boolean) {
      Component.slot()[0].children.map((i)=> {
        if (i.subTag === 'san-checkbox') {
          i._setIndeterminate(false);
          i.data.set('isChecked', boolean);
          this._setAllChildren(i, boolean);
        }
      });
    },
    _setIndeterminate(boolean) {
      document.getElementById(this.data.get('id') + '_checkbox').indeterminate = boolean;
    },
    _getIndeterminate() {
      return document.getElementById(this.data.get('id') + '_checkbox').indeterminate;
    }
  }
</script>
<style scoped>
  label {
    display: inline-block;
  }
  input[type="checkbox"] {
    display: none;
    margin: 0;
  }
  input[type="checkbox"] + label span {
    display: inline-block;
    height: 35px;
    /* set the text and checkbox to be the same height  */
    vertical-align: middle;
    line-height: 2rem;
  }
  input[type="checkbox"] + label span.checkbox {
    background: url('unchecked.svg');
    background-size: contain;
    opacity: 0.5;
    width: 35px;
  }
  input[type="checkbox"]:checked + label span.checkbox {
    background: url('checked.svg');
    background-size: contain;
  }
  input[type="checkbox"]:indeterminate + label span.checkbox {
    background: url('indeterminate.svg');
    background-size: contain;
  }
  input[type="checkbox"]:disabled + label span.checkbox {
    opacity: 0.2;
  }
  .sub {
    margin-left: 35px;
  }
  .text {
    margin-left: 4px;
    color: #505050;
  }
</style>